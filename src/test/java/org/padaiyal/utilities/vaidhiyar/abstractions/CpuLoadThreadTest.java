package org.padaiyal.utilities.vaidhiyar.abstractions;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.mockito.ArgumentMatchers;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

/**
 * Tests CpuLoadThread when an InterruptedException is thrown while sleeping.
 */
public class CpuLoadThreadTest {

  /**
   * Tests the CpuLoadThread when an InterruptedException is thrown while sleeping.
   *
   * @param name                    Name of the CPU load thread.
   * @param priority                Priority of the CPU load thread.
   * @param load                    CPU load to be generated by the thread.
   * @param durationInMilliSeconds  Duration for which the CPU load has to be generated.
   */
  @ParameterizedTest
  @CsvSource({
      "Test CPU load thread, 10, 0.5, 10000"
  })
  void testCpuLoadThreadInterruptedException(
      String name,
      int priority,
      double load,
      long durationInMilliSeconds
  ) {
    try (
        MockedStatic<CpuLoadThread> cpuLoadThreadMock = Mockito.mockStatic(CpuLoadThread.class)
    ) {
      cpuLoadThreadMock.when(
          () -> CpuLoadThread.sleepCurrentThread(ArgumentMatchers.anyLong())
      ).thenThrow(InterruptedException.class);

      CpuLoadThread cpuLoadThread = new CpuLoadThread(
          name,
          priority,
          load,
          durationInMilliSeconds
      );

      Assertions.assertThrows(
          RuntimeException.class,
          cpuLoadThread::run
      );
    }
  }

}
